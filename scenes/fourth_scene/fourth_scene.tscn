[gd_scene load_steps=5 format=3 uid="uid://b83ss7rsln8uk"]

[ext_resource type="Script" path="res://fourth_scene.gd" id="1_oy3yn"]

[sub_resource type="GDScript" id="GDScript_xbqbv"]
script/source = "extends Label

func _ready()->void:
	ResourceManager.ref.connect(\"resource_updated\", Callable(self, \"_on_resource_updated\"))
	

func _on_resource_updated(resource_type: String, new_amount: float) -> void:
	if resource_type == \"nutrients\":
		text = \"Nutrients: \" + str(new_amount)
"

[sub_resource type="GDScript" id="GDScript_out3a"]
script/source = "#class_name BugCollectorButton
extends Button

# This variable lets you set the generator identifier in the Inspector.
var generator_id = \"bugUpgradeOne\"

# Reference to the manager that handles generator logic.
# Adjust the node path to match your project’s hierarchy.
@onready var generator_manager = GeneratorManager.ref
@onready var generator_info = GeneratorManager.ref.runtime_generators.get(generator_id)
func _ready():
	# Connect the button's pressed signal to our custom function.
	connect(\"pressed\", Callable(self, \"_on_button_pressed\"))
	_update_cost_display()

func _on_button_pressed():
	# Check if the generator can be purchased (e.g., has enough resources, prerequisites, etc.).
	if generator_manager.can_purchase_generator(generator_id):
		# If the purchase is valid, call the purchase function.
		generator_manager.purchase_generator(generator_id)
		print(\"Generator purchased successfully!\")
		_update_cost_display()
	else:
		# Optionally provide feedback if the purchase cannot be made.
		print(\"Insufficient resources or prerequisites not met to purchase this generator.\")
	
func _update_cost_display():
	text = \"Unlock Bug Collector\\n\"+str(generator_info.cost)+\"\\n(\"+str(generator_info.amount_owned)+\")\"
"

[sub_resource type="GDScript" id="GDScript_efyds"]
script/source = "#class_name BugCollectorButton
extends Button

# This variable lets you set the generator identifier in the Inspector.
var generator_id = \"bugUpgradeTwo\"

# Reference to the manager that handles generator logic.
# Adjust the node path to match your project’s hierarchy.
@onready var generator_manager = GeneratorManager.ref
@onready var generator_info = GeneratorManager.ref.runtime_generators.get(generator_id)
#@onready var currently_owned = GeneratorManager.ref.runtime_generators.
func _ready():
	# Connect the button's pressed signal to our custom function.
	connect(\"pressed\", Callable(self, \"_on_button_pressed\"))
	_update_cost_display()

func _on_button_pressed():
	# Check if the generator can be purchased (e.g., has enough resources, prerequisites, etc.).
	if generator_manager.can_purchase_generator(generator_id):
		# If the purchase is valid, call the purchase function.
		generator_manager.purchase_generator(generator_id)
		print(\"Generator purchased successfully!\")
		_update_cost_display()
	else:
		# Optionally provide feedback if the purchase cannot be made.
		print(\"Insufficient resources or prerequisites not met to purchase this generator.\")
	
func _update_cost_display():
		text = \"Unlock Bug Collector Mk.2\\n\"+str(generator_info.cost)+\"\\n(\"+str(generator_info.amount_owned)+\")\"
"

[node name="FourthScene" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_oy3yn")

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 16
theme_override_constants/margin_top = 16
theme_override_constants/margin_right = 16
theme_override_constants/margin_bottom = 16

[node name="HBoxContainer" type="HBoxContainer" parent="MarginContainer"]
layout_mode = 2

[node name="LeftPanel" type="Control" parent="MarginContainer/HBoxContainer"]
custom_minimum_size = Vector2(533, 0)
layout_mode = 2

[node name="MiddlePanel" type="Control" parent="MarginContainer/HBoxContainer"]
custom_minimum_size = Vector2(533, 0)
layout_mode = 2

[node name="EatBugButton" type="Button" parent="MarginContainer/HBoxContainer/MiddlePanel"]
unique_name_in_owner = true
custom_minimum_size = Vector2(200, 200)
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -60.0
offset_top = -60.0
offset_right = 60.0
offset_bottom = 60.0
grow_horizontal = 2
grow_vertical = 2
text = "Eat"

[node name="Label" type="Label" parent="MarginContainer/HBoxContainer/MiddlePanel"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -135.0
offset_right = 135.0
offset_bottom = 39.0
grow_horizontal = 2
theme_type_variation = &"HeaderLarge"
text = "Nutrients: 0"
horizontal_alignment = 1
script = SubResource("GDScript_xbqbv")

[node name="RightPanel" type="Control" parent="MarginContainer/HBoxContainer"]
custom_minimum_size = Vector2(533, 0)
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer/HBoxContainer/RightPanel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="MarginContainer/HBoxContainer/RightPanel/VBoxContainer"]
layout_mode = 2
theme_type_variation = &"HeaderLarge"
text = "Unlockables"
horizontal_alignment = 1

[node name="HBoxContainer" type="HBoxContainer" parent="MarginContainer/HBoxContainer/RightPanel/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4

[node name="BugCollectorUnlockButton" type="Button" parent="MarginContainer/HBoxContainer/RightPanel/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(150, 100)
layout_mode = 2
size_flags_horizontal = 4
text = "Unlock 
Bug Collecter
Cost: <Value>"
script = SubResource("GDScript_out3a")

[node name="BugCollectorUnlockTwoButton" type="Button" parent="MarginContainer/HBoxContainer/RightPanel/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(150, 100)
layout_mode = 2
text = "Unlock
Bug Collector Mk.2
Cost: <Value>"
script = SubResource("GDScript_efyds")
